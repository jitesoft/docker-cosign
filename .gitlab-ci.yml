include:
  - project: jitesoft/gitlab-ci-lib
    file: Scan/trivy.yml
  - project: jitesoft/gitlab-ci-lib
    file: OCI/sign.yml

stages:
  - check
  - build
  - containerize
  - sign
  - scan
  - cache

check:
  stage: check
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - touch version.txt
    - REMOTE_VERSION=$(wget -qO- https://api.github.com/repos/sigstore/cosign/releases | jq -r ".[0].name")
    - LOCAL_VERSION=$(cat version.txt)
    - |
      if [ ! -z "${FORCE_BUILD+x}" ] || [ "${REMOTE_VERSION}" != "${LOCAL_VERSION}" ]; then
        echo "${REMOTE_VERSION} and ${LOCAL_VERSION} differ. Running build."
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[VERSION]=${REMOTE_VERSION}" -F "variables[BUILD]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        echo "${REMOTE_VERSION} and ${LOCAL_VERSION} where equal. Running scan."
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[VERSION]=${REMOTE_VERSION}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi
  cache:
    paths:
      - version.txt
    policy: pull

build:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/go:1.16
  parallel:
    matrix:
      - { TAG_ARCH: "native-amd64", GOARCH: "amd64", GIT_STRATEGY: "none" }
      - { TAG_ARCH: "native-arm64", GOARCH: "arm64", GIT_STRATEGY: "none" }
      - { TAG_ARCH: "native-arm64", GOARCH: "arm", GO_ARM: "v7", GIT_STRATEGY: "none"}
  variables:
    PKG: "github.com/sigstore/cosign/cmd/cosign/cli"
  script:
    - apk add --no-cache gcc musl-dev
    - wget https://github.com/sigstore/cosign/archive/refs/tags/${VERSION}.tar.gz
    - tar -xf ${VERSION}.tar.gz
    - cd cosign-*
    - BUILD_DATE=$(date "+%Y-%m-%dT%H:%M:%SZ")
    - CGO_ENABLED=on go build -ldflags="-s -w -X ${PKG}.GitVersion=${VERSION} -X ${PKG}.buildDate=${BUILD_DATE}" -o cosign ./cmd/cosign
    - cd ..
    - mkdir binaries
    - cp cosign-*/cosign binaries/cosign-${GOARCH}
    - ./binaries/cosign-${GOARCH} version
  rules:
    - if: "$BUILD"
      when: always
    - when: never
  artifacts:
    paths:
      - binaries
    expire_in: 1 day
    public: true
  tags:
    - $TAG_ARCH

containerize:
  stage: containerize
  needs:
    - job: build
      artifacts: true
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - TAG_LIST=$(helper "${CI_REGISTRY_IMAGE},ghcr.io/jitesoft/cosign,jitesoft/cosign" "latest,${VERSION}")
    - mv entrypoint binaries/entrypoint
    - docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 --progress plain --push ${TAG_LIST} --build-arg BUILD_TIME=$(date -Iseconds) --build-arg VERSION=${VERSION} .
  tags: [ jitesoft, buildx, protected ]

sign:
  extends: .sign
  tags: [ jitesoft, protected, buildx ]
  stage: sign
  variables:
    COSIGN_ANNOTATIONS: "-a sig=jitesoft-bot"
    SIGN_TAGS: "${VERSION},latest"
    SIGN_IMAGES: "jitesoft/cosign,${CI_REGISTRY_IMAGE},ghcr.io/jitesoft/cosign"
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never

scan:
  stage: scan
  extends: .container_scanning
  rules:
    - if: "$SCAN"
      when: always
    - if: "$BUILD"
      when: on_success
    - when: never
  variables:
    GIT_STRATEGY: none
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:${VERSION}"

create-cache:
  stage: cache
  script:
    - echo "${VERSION}" > version.txt
  cache:
    paths:
      - version.txt
    policy: push
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
